-- Criação das tabelas
CREATE TABLE CLIENTE
(
    CODIGO          NUMBER          NOT NULL,
    NOME            VARCHAR2(60)    NOT NULL,
    RUA             VARCHAR2(80)    NOT NULL,
    NR              NUMBER(4)       NOT NULL,
    BAIRRO          VARCHAR2(50)    NOT NULL,
    COMPLEMENTO     VARCHAR2(100)   NULL,
    CIDADE          VARCHAR2(50)    NOT NULL,
    UF              VARCHAR2(2)     NOT NULL,
    CEP             VARCHAR2(10)    NOT NULL,
    CONSTRAINT PK_CLIENTE PRIMARY KEY (CODIGO)
);

CREATE TABLE PF
(
    CODIGO_CLI      NUMBER          NOT NULL,
    CNPF            VARCHAR2(14)    NOT NULL,
    RG              VARCHAR2(10)    NOT NULL,
    DATA_NASCIMENTO DATE            NOT NULL,
    CONSTRAINT PK_PF PRIMARY KEY (CODIGO_CLI),
    CONSTRAINT FK_CLIENTE_PF FOREIGN KEY (CODIGO_CLI) REFERENCES CLIENTE (CODIGO)
);

CREATE TABLE PJ
(
    CODIGO_CLI      NUMBER          NOT NULL,
    CNPJ            VARCHAR2(19)    NOT NULL,
    IE              VARCHAR2(10)    NOT NULL,
    NOME_FANTASIA   VARCHAR2(60)    NOT NULL,
    CONSTRAINT PK_PJ PRIMARY KEY (CODIGO_CLI),
    CONSTRAINT FK_CLIENTE_PJ FOREIGN KEY (CODIGO_CLI) REFERENCES CLIENTE (CODIGO)
);

CREATE TABLE PRODUTO
(
    CODIGO          NUMBER          NOT NULL,
    DESCRICAO       VARCHAR2(80)    NOT NULL,
    UNID_MEDIDA     VARCHAR2(10)    NOT NULL,
    CONSTRAINT PK_PRODUTO PRIMARY KEY (CODIGO)
);

CREATE TABLE VENDEDOR
(
    MATRICULA       NUMBER          NOT NULL,
    NOME            VARCHAR2(60)    NOT NULL,
    CNPF            VARCHAR2(14)    NOT NULL,
    CONSTRAINT PK_VENDEDOR PRIMARY KEY (MATRICULA)
);

CREATE TABLE FONE_CLIENTE
(
    NUMERO          VARCHAR2(14)    NOT NULL,
    CODIGO_CLI      NUMBER          NOT NULL,
    CONSTRAINT PK_FONE_CLIENTE PRIMARY KEY (NUMERO, CODIGO_CLI),
    CONSTRAINT FK_FONE_CLIENTE FOREIGN KEY (CODIGO_CLI) REFERENCES CLIENTE (CODIGO)
);

CREATE TABLE FONE_VENDEDOR
(
    NUMERO          VARCHAR2(14)    NOT NULL,
    MATRICULA_VEN   NUMBER          NOT NULL,
    CONSTRAINT PK_FONE_VENDEDOR PRIMARY KEY (NUMERO, MATRICULA_VEN),
    CONSTRAINT FK_FONE_VENDEDOR FOREIGN KEY (MATRICULA_VEN) REFERENCES VENDEDOR (MATRICULA)
);

CREATE TABLE PRATELEIRA
(
    CODIGO          NUMBER(3)       NOT NULL,
    DESCRICAO       VARCHAR2(50)    NOT NULL,
    NUMERO_SECOES   NUMBER(2)       NOT NULL,
    CONSTRAINT PK_PRATELEIRA PRIMARY KEY (CODIGO)
);

CREATE TABLE PEDIDO (
    NUMERO          NUMBER(6) NOT NULL,
    DATA            DATE NOT NULL,
    PRAZO_ENTREGA   DATE NOT NULL,
    RUA             VARCHAR2(80),
    NR              NUMBER(4),
    BAIRRO          VARCHAR2(50),
    COMPLEMENTO     VARCHAR2(100),
    CIDADE          VARCHAR2(50),
    UF              VARCHAR2(2),
    CEP             VARCHAR2(10),
    TOTAL_FATURA    NUMBER(8,2),
    CODIGO_CLI      NUMBER,
    MATRICULA_VEN   NUMBER,
    CONSTRAINT PK_PEDIDO PRIMARY KEY (NUMERO),
    CONSTRAINT FK_PED_CLIENTE FOREIGN KEY (CODIGO_CLI) REFERENCES CLIENTE (CODIGO),
    CONSTRAINT FK_PED_VENDEDOR FOREIGN KEY (MATRICULA_VEN) REFERENCES VENDEDOR (MATRICULA)
);

CREATE TABLE ESTOQUE (
    DATA_ENTRADA    DATE,
    CODIGO_PRO      NUMBER,
    CODIGO_PRA      NUMBER(3),
    QUANTIDADE      NUMBER(5) NOT NULL,
    DATA_VALIDADE   DATE,
    CONSTRAINT PK_ESTOQUE PRIMARY KEY (DATA_ENTRADA, CODIGO_PRO, CODIGO_PRA),
    CONSTRAINT FK_EST_PRODUTO FOREIGN KEY (CODIGO_PRO) REFERENCES PRODUTO (CODIGO),
    CONSTRAINT FK_EST_PRATELEIRA FOREIGN KEY (CODIGO_PRA) REFERENCES PRATELEIRA (CODIGO)
);

CREATE TABLE CAPACIDADE_ESTOQUE (
    CODIGO_PRO        NUMBER,
    CODIGO_PRA        NUMBER(3),
    QUANTIDADE        NUMBER(5),
    CONSTRAINT PK_CAPACIDADE_ESTOQUE PRIMARY KEY (CODIGO_PRO, CODIGO_PRA),
    CONSTRAINT FK_CAP_EST_PRODUTO FOREIGN KEY (CODIGO_PRO) REFERENCES PRODUTO (CODIGO),
    CONSTRAINT FK_CAP_EST_PRATELEIRA FOREIGN KEY (CODIGO_PRA) REFERENCES PRATELEIRA (CODIGO)
);

CREATE TABLE ITEM_PRODUTO (
    CODIGO_PRO          NUMBER,  -- Código do produto
    NUMERO_PED          NUMBER(6),  -- Número do pedido
    QUANTIDADE          NUMBER(5),  -- Quantidade do produto no pedido
    PRECO_UNITARIO      NUMBER(5,2),  -- Preço unitário do produto
    VALOR_ITEM          NUMBER(7,2),  -- Valor total do item no pedido
    CONSTRAINT PK_ITEM_PRODUTO PRIMARY KEY (CODIGO_PRO, NUMERO_PED),
    CONSTRAINT FK_ITEM_PEDIDO FOREIGN KEY (NUMERO_PED) REFERENCES PEDIDO (NUMERO),
    CONSTRAINT FK_ITEM_PRODUTO FOREIGN KEY (CODIGO_PRO) REFERENCES PRODUTO (CODIGO)
);

-- Remover a sequência se já existir
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_ITEM_ID';
EXCEPTION
   WHEN OTHERS THEN
      NULL;
END;
/

-- Criar sequência
CREATE SEQUENCE SEQ_ITEM_ID INCREMENT BY 2 START WITH 1;

-- Comentários
COMMENT ON TABLE ITEM_PRODUTO IS 'Tabela que armazena os itens de um pedido, relacionando produtos e pedidos';

COMMENT ON COLUMN ITEM_PRODUTO.CODIGO_PRO IS 'Código do produto';
COMMENT ON COLUMN ITEM_PRODUTO.NUMERO_PED IS 'Número do pedido';
COMMENT ON COLUMN ITEM_PRODUTO.QUANTIDADE IS 'Quantidade do produto no pedido';
COMMENT ON COLUMN ITEM_PRODUTO.PRECO_UNITARIO IS 'Preço unitário do produto';
COMMENT ON COLUMN ITEM_PRODUTO.VALOR_ITEM IS 'Valor total do item no pedido';

-- Copiando dados para as tabelas
INSERT INTO CLIENTE
SELECT * FROM DEMO.CLIENTE
WHERE NOT EXISTS (SELECT 1 FROM CLIENTE WHERE CLIENTE.CODIGO = DEMO.CLIENTE.CODIGO);

INSERT INTO PF
SELECT * FROM DEMO.PF
WHERE NOT EXISTS (SELECT 1 FROM PF WHERE PF.CODIGO_CLI = DEMO.PF.CODIGO_CLI);

INSERT INTO PJ
SELECT * FROM DEMO.PJ
WHERE NOT EXISTS (SELECT 1 FROM PJ WHERE PJ.CODIGO_CLI = DEMO.PJ.CODIGO_CLI);

INSERT INTO PRODUTO
SELECT * FROM DEMO.PRODUTO
WHERE NOT EXISTS (SELECT 1 FROM PRODUTO WHERE PRODUTO.CODIGO = DEMO.PRODUTO.CODIGO);

INSERT INTO VENDEDOR
SELECT * FROM DEMO.VENDEDOR
WHERE NOT EXISTS (SELECT 1 FROM VENDEDOR WHERE VENDEDOR.MATRICULA = DEMO.VENDEDOR.MATRICULA);

INSERT INTO FONE_CLIENTE
SELECT * FROM DEMO.FONE_CLIENTE
WHERE NOT EXISTS (SELECT 1 FROM FONE_CLIENTE WHERE FONE_CLIENTE.NUMERO = DEMO.FONE_CLIENTE.NUMERO AND FONE_CLIENTE.CODIGO_CLI = DEMO.FONE_CLIENTE.CODIGO_CLI);

INSERT INTO FONE_VENDEDOR
SELECT * FROM DEMO.FONE_VENDEDOR
WHERE NOT EXISTS (SELECT 1 FROM FONE_VENDEDOR WHERE FONE_VENDEDOR.NUMERO = DEMO.FONE_VENDEDOR.NUMERO AND FONE_VENDEDOR.MATRICULA_VEN = DEMO.FONE_VENDEDOR.MATRICULA_VEN);

INSERT INTO PEDIDO
SELECT * FROM DEMO.PEDIDO
WHERE NOT EXISTS (SELECT 1 FROM PEDIDO WHERE PEDIDO.NUMERO = DEMO.PEDIDO.NUMERO)
AND DEMO.PEDIDO.PRAZO_ENTREGA IS NOT NULL;

INSERT INTO ESTOQUE
SELECT * FROM DEMO.ESTOQUE
WHERE NOT EXISTS (SELECT 1 FROM ESTOQUE WHERE ESTOQUE.DATA_ENTRADA = DEMO.ESTOQUE.DATA_ENTRADA AND ESTOQUE.CODIGO_PRO = DEMO.ESTOQUE.CODIGO_PRO AND ESTOQUE.CODIGO_PRA = DEMO.ESTOQUE.CODIGO_PRA)
AND DEMO.ESTOQUE.CODIGO_PRA IN (SELECT CODIGO FROM PRATELEIRA)
AND DEMO.ESTOQUE.CODIGO_PRO IN (SELECT CODIGO FROM PRODUTO);

INSERT INTO CAPACIDADE_ESTOQUE
SELECT * FROM DEMO.CAPACIDADE_ESTOQUE
WHERE NOT EXISTS (SELECT 1 FROM CAPACIDADE_ESTOQUE WHERE CAPACIDADE_ESTOQUE.CODIGO_PRO = DEMO.CAPACIDADE_ESTOQUE.CODIGO_PRO AND CAPACIDADE_ESTOQUE.CODIGO_PRA = DEMO.CAPACIDADE_ESTOQUE.CODIGO_PRA)
AND DEMO.CAPACIDADE_ESTOQUE.CODIGO_PRA IN (SELECT CODIGO FROM PRATELEIRA)
AND DEMO.CAPACIDADE_ESTOQUE.CODIGO_PRO IN (SELECT CODIGO FROM PRODUTO);

-- Inserindo itens de pedido
INSERT INTO ITEM_PRODUTO (CODIGO_PRO, NUMERO_PED, QUANTIDADE, PRECO_UNITARIO, VALOR_ITEM)
SELECT 207, NUMERO, 100, 10.00, 100 * 10.00
FROM PEDIDO
WHERE MOD(NUMERO, 2) = 0 AND TO_CHAR(DATA, 'YYYY') < 2018;

INSERT INTO ITEM_PRODUTO (CODIGO_PRO, NUMERO_PED, QUANTIDADE, PRECO_UNITARIO, VALOR_ITEM)
SELECT 206, NUMERO, 50, 12.00, 50 * 12.00
FROM PEDIDO
WHERE MOD(NUMERO, 2) <> 0 AND TO_CHAR(DATA, 'YYYY') = '2018';

INSERT INTO ITEM_PRODUTO (CODIGO_PRO, NUMERO_PED, QUANTIDADE, PRECO_UNITARIO, VALOR_ITEM)
SELECT 207, NUMERO, 150, 14.00, 150 * 14.00
FROM PEDIDO
WHERE MOD(NUMERO, 2) = 0 AND TO_CHAR(DATA, 'YYYY') = '2018';

INSERT INTO ITEM_PRODUTO (CODIGO_PRO, NUMERO_PED, QUANTIDADE, PRECO_UNITARIO, VALOR_ITEM)
SELECT 206, NUMERO, 200, 8.00, 200 * 8.00
FROM PEDIDO
WHERE MOD(NUMERO, 2) <> 0 AND TO_CHAR(DATA, 'YYYY') < 2018;

INSERT INTO ITEM_PRODUTO (CODIGO_PRO, NUMERO_PED, QUANTIDADE, PRECO_UNITARIO, VALOR_ITEM)
SELECT 208, NUMERO, 80, 18.00, 80 * 18.00
FROM PEDIDO
WHERE RUA IS NULL AND NR IS NULL AND BAIRRO IS NULL AND COMPLEMENTO IS NULL
AND CIDADE IS NULL AND UF IS NULL AND CEP IS NULL AND TO_CHAR(DATA, 'YYYY') = '2017';

INSERT INTO ITEM_PRODUTO (CODIGO_PRO, NUMERO_PED, QUANTIDADE, PRECO_UNITARIO, VALOR_ITEM)
SELECT 208, NUMERO, 70, 20.00, 70 * 20.00
FROM PEDIDO
WHERE RUA IS NULL AND NR IS NULL AND BAIRRO IS NULL AND COMPLEMENTO IS NULL
AND CIDADE IS NULL AND UF IS NULL;

SELECT * FROM ITEM_PRODUTO;

-- a. Para os itens dos pedidos de NUMERO menor que 20 e maior que 50, e de
-- produtos com código de 203 a 205, inclusive: Multiplicar a
-- QUANTIDADE por 2
-- RESOLUÇÃO:
UPDATE ITEM_PRODUTO
SET QUANTIDADE = QUANTIDADE * 2
WHERE ((NUMERO_PED < 20 OR NUMERO_PED > 50)
OR CODIGO_PRO BETWEEN 203 AND 205);

SELECT * FROM ITEM_PRODUTO;

-- b. Para o cliente de CODIGO ímpar com vendedor de MATRICULA par: somar
-- 15 na QUANTIDADE.
-- RESOLUÇÃO:
UPDATE ITEM_PRODUTO IP
SET IP.QUANTIDADE = IP.QUANTIDADE + 15
WHERE EXISTS (
    SELECT 1
    FROM PEDIDO P
    WHERE P.NUMERO = IP.NUMERO_PED
        AND MOD(P.CODIGO_CLI, 2) = 1
        AND MOD(P.MATRICULA_VEN, 2) =0);

SELECT * FROM ITEM_PRODUTO;

-- c. Para pedidos com NUMERO múltiplo de 3: Retirar R$ 0.50 no valor de
-- cada preço unitário.
-- RESOLUÇÃO:
UPDATE ITEM_PRODUTO
SET PRECO_UNITARIO = PRECO_UNITARIO - 0.50
WHERE MOD(NUMERO_PED, 3) = 0;

SELECT * FROM ITEM_PRODUTO;

-- d. Ajustar o valor total de cada item de produto no pedido (VALOR_ITEM),
-- em conformidade com a quantidade e preço unitário.
-- RESOLUÇÃO:
UPDATE ITEM_PRODUTO
SET VALOR_ITEM = QUANTIDADE * PRECO_UNITARIO;

SELECT * FROM ITEM_PRODUTO;

-- e. Ajustar o total da fatura de todos os pedidos, em conformidade com os
-- valores dos itens incluídos em cada pedido.
-- RESOLUÇÃO:
UPDATE PEDIDO P
SET TOTAL_FATURA = (
    SELECT SUM(IP.VALOR_ITEM)
    FROM ITEM_PRODUTO IP
    WHERE IP.NUMERO_PED = P.NUMERO
);

SELECT * FROM ITEM_PRODUTO;

